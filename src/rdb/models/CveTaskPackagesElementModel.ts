/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CveTaskPackageVulnerableElementModel } from './CveTaskPackageVulnerableElementModel';
import {
    CveTaskPackageVulnerableElementModelFromJSON,
    CveTaskPackageVulnerableElementModelFromJSONTyped,
    CveTaskPackageVulnerableElementModelToJSON,
} from './CveTaskPackageVulnerableElementModel';

/**
 * 
 * @export
 * @interface CveTaskPackagesElementModel
 */
export interface CveTaskPackagesElementModel {
    /**
     * subtasks id
     * @type {number}
     * @memberof CveTaskPackagesElementModel
     */
    subtask?: number;
    /**
     * package hash UInt64 as string
     * @type {string}
     * @memberof CveTaskPackagesElementModel
     */
    pkghash?: string;
    /**
     * source package name
     * @type {string}
     * @memberof CveTaskPackagesElementModel
     */
    pkgName?: string;
    /**
     * package version
     * @type {string}
     * @memberof CveTaskPackagesElementModel
     */
    pkgVersion?: string;
    /**
     * package release
     * @type {string}
     * @memberof CveTaskPackagesElementModel
     */
    pkgRelease?: string;
    /**
     * package set name
     * @type {string}
     * @memberof CveTaskPackagesElementModel
     */
    branch?: string;
    /**
     * errata id
     * @type {string}
     * @memberof CveTaskPackagesElementModel
     */
    errataId?: string;
    /**
     * errata link to errata.altlinux.org
     * @type {string}
     * @memberof CveTaskPackagesElementModel
     */
    errataLink?: string;
    /**
     * fixed vulnerabilities list
     * @type {Array<CveTaskPackageVulnerableElementModel>}
     * @memberof CveTaskPackagesElementModel
     */
    vulnerabilities?: Array<CveTaskPackageVulnerableElementModel>;
}

/**
 * Check if a given object implements the CveTaskPackagesElementModel interface.
 */
export function instanceOfCveTaskPackagesElementModel(value: object): value is CveTaskPackagesElementModel {
    return true;
}

export function CveTaskPackagesElementModelFromJSON(json: any): CveTaskPackagesElementModel {
    return CveTaskPackagesElementModelFromJSONTyped(json, false);
}

export function CveTaskPackagesElementModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): CveTaskPackagesElementModel {
    if (json == null) {
        return json;
    }
    return {
        
        'subtask': json['subtask'] == null ? undefined : json['subtask'],
        'pkghash': json['pkghash'] == null ? undefined : json['pkghash'],
        'pkgName': json['pkg_name'] == null ? undefined : json['pkg_name'],
        'pkgVersion': json['pkg_version'] == null ? undefined : json['pkg_version'],
        'pkgRelease': json['pkg_release'] == null ? undefined : json['pkg_release'],
        'branch': json['branch'] == null ? undefined : json['branch'],
        'errataId': json['errata_id'] == null ? undefined : json['errata_id'],
        'errataLink': json['errata_link'] == null ? undefined : json['errata_link'],
        'vulnerabilities': json['vulnerabilities'] == null ? undefined : ((json['vulnerabilities'] as Array<any>).map(CveTaskPackageVulnerableElementModelFromJSON)),
    };
}

export function CveTaskPackagesElementModelToJSON(value?: CveTaskPackagesElementModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'subtask': value['subtask'],
        'pkghash': value['pkghash'],
        'pkg_name': value['pkgName'],
        'pkg_version': value['pkgVersion'],
        'pkg_release': value['pkgRelease'],
        'branch': value['branch'],
        'errata_id': value['errataId'],
        'errata_link': value['errataLink'],
        'vulnerabilities': value['vulnerabilities'] == null ? undefined : ((value['vulnerabilities'] as Array<any>).map(CveTaskPackageVulnerableElementModelToJSON)),
    };
}

