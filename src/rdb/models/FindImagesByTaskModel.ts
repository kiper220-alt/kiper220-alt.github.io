/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FindImagesByTaskSubtaskElementModel } from './FindImagesByTaskSubtaskElementModel';
import {
    FindImagesByTaskSubtaskElementModelFromJSON,
    FindImagesByTaskSubtaskElementModelFromJSONTyped,
    FindImagesByTaskSubtaskElementModelToJSON,
} from './FindImagesByTaskSubtaskElementModel';
import type { FindImagesByTaskIterationElementModel } from './FindImagesByTaskIterationElementModel';
import {
    FindImagesByTaskIterationElementModelFromJSON,
    FindImagesByTaskIterationElementModelFromJSONTyped,
    FindImagesByTaskIterationElementModelToJSON,
} from './FindImagesByTaskIterationElementModel';

/**
 * 
 * @export
 * @interface FindImagesByTaskModel
 */
export interface FindImagesByTaskModel {
    /**
     * task id
     * @type {number}
     * @memberof FindImagesByTaskModel
     */
    taskId?: number;
    /**
     * task state
     * @type {string}
     * @memberof FindImagesByTaskModel
     */
    taskState?: string;
    /**
     * task is test-only
     * @type {number}
     * @memberof FindImagesByTaskModel
     */
    taskTestonly?: number;
    /**
     * task repo
     * @type {string}
     * @memberof FindImagesByTaskModel
     */
    taskRepo?: string;
    /**
     * task owner
     * @type {string}
     * @memberof FindImagesByTaskModel
     */
    taskOwner?: string;
    /**
     * task try
     * @type {number}
     * @memberof FindImagesByTaskModel
     */
    taskTry?: number;
    /**
     * task iter
     * @type {number}
     * @memberof FindImagesByTaskModel
     */
    taskIter?: number;
    /**
     * task message
     * @type {string}
     * @memberof FindImagesByTaskModel
     */
    taskMessage?: string;
    /**
     * 
     * @type {Date}
     * @memberof FindImagesByTaskModel
     */
    taskChanged?: Date;
    /**
     * task dependencies
     * @type {Array<number>}
     * @memberof FindImagesByTaskModel
     */
    dependencies?: Array<number>;
    /**
     * subtasks
     * @type {Array<FindImagesByTaskSubtaskElementModel>}
     * @memberof FindImagesByTaskModel
     */
    subtasks?: Array<FindImagesByTaskSubtaskElementModel>;
    /**
     * 
     * @type {Array<FindImagesByTaskIterationElementModel>}
     * @memberof FindImagesByTaskModel
     */
    iterations?: Array<FindImagesByTaskIterationElementModel>;
}

/**
 * Check if a given object implements the FindImagesByTaskModel interface.
 */
export function instanceOfFindImagesByTaskModel(value: object): value is FindImagesByTaskModel {
    return true;
}

export function FindImagesByTaskModelFromJSON(json: any): FindImagesByTaskModel {
    return FindImagesByTaskModelFromJSONTyped(json, false);
}

export function FindImagesByTaskModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): FindImagesByTaskModel {
    if (json == null) {
        return json;
    }
    return {
        
        'taskId': json['task_id'] == null ? undefined : json['task_id'],
        'taskState': json['task_state'] == null ? undefined : json['task_state'],
        'taskTestonly': json['task_testonly'] == null ? undefined : json['task_testonly'],
        'taskRepo': json['task_repo'] == null ? undefined : json['task_repo'],
        'taskOwner': json['task_owner'] == null ? undefined : json['task_owner'],
        'taskTry': json['task_try'] == null ? undefined : json['task_try'],
        'taskIter': json['task_iter'] == null ? undefined : json['task_iter'],
        'taskMessage': json['task_message'] == null ? undefined : json['task_message'],
        'taskChanged': json['task_changed'] == null ? undefined : (new Date(json['task_changed'])),
        'dependencies': json['dependencies'] == null ? undefined : json['dependencies'],
        'subtasks': json['subtasks'] == null ? undefined : ((json['subtasks'] as Array<any>).map(FindImagesByTaskSubtaskElementModelFromJSON)),
        'iterations': json['iterations'] == null ? undefined : ((json['iterations'] as Array<any>).map(FindImagesByTaskIterationElementModelFromJSON)),
    };
}

export function FindImagesByTaskModelToJSON(value?: FindImagesByTaskModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'task_id': value['taskId'],
        'task_state': value['taskState'],
        'task_testonly': value['taskTestonly'],
        'task_repo': value['taskRepo'],
        'task_owner': value['taskOwner'],
        'task_try': value['taskTry'],
        'task_iter': value['taskIter'],
        'task_message': value['taskMessage'],
        'task_changed': value['taskChanged'] == null ? undefined : ((value['taskChanged']).toISOString()),
        'dependencies': value['dependencies'],
        'subtasks': value['subtasks'] == null ? undefined : ((value['subtasks'] as Array<any>).map(FindImagesByTaskSubtaskElementModelToJSON)),
        'iterations': value['iterations'] == null ? undefined : ((value['iterations'] as Array<any>).map(FindImagesByTaskIterationElementModelToJSON)),
    };
}

