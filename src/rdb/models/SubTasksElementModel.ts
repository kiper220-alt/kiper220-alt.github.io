/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SubTaskArchitectureModel } from './SubTaskArchitectureModel';
import {
    SubTaskArchitectureModelFromJSON,
    SubTaskArchitectureModelFromJSONTyped,
    SubTaskArchitectureModelToJSON,
} from './SubTaskArchitectureModel';

/**
 * 
 * @export
 * @interface SubTasksElementModel
 */
export interface SubTasksElementModel {
    /**
     * subtasks id
     * @type {number}
     * @memberof SubTasksElementModel
     */
    subtaskId?: number;
    /**
     * subtask type
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskType?: string;
    /**
     * subtask srpm
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskSrpm?: string;
    /**
     * source package name
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskSrpmName?: string;
    /**
     * source package version and release
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskSrpmEvr?: string;
    /**
     * subtask dir
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskDir?: string;
    /**
     * subtask tag id
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskTagId?: string;
    /**
     * subtask tag name
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskTagName?: string;
    /**
     * subtask tag author
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskTagAuthor?: string;
    /**
     * subtask package
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskPackage?: string;
    /**
     * subtask package from
     * @type {string}
     * @memberof SubTasksElementModel
     */
    subtaskPkgFrom?: string;
    /**
     * subtask changed
     * @type {Date}
     * @memberof SubTasksElementModel
     */
    subtaskChanged?: Date;
    /**
     * subtask type
     * @type {string}
     * @memberof SubTasksElementModel
     */
    type?: string;
    /**
     * list of subtask architectures
     * @type {Array<SubTaskArchitectureModel>}
     * @memberof SubTasksElementModel
     */
    archs?: Array<SubTaskArchitectureModel>;
}

/**
 * Check if a given object implements the SubTasksElementModel interface.
 */
export function instanceOfSubTasksElementModel(value: object): value is SubTasksElementModel {
    return true;
}

export function SubTasksElementModelFromJSON(json: any): SubTasksElementModel {
    return SubTasksElementModelFromJSONTyped(json, false);
}

export function SubTasksElementModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubTasksElementModel {
    if (json == null) {
        return json;
    }
    return {
        
        'subtaskId': json['subtask_id'] == null ? undefined : json['subtask_id'],
        'subtaskType': json['subtask_type'] == null ? undefined : json['subtask_type'],
        'subtaskSrpm': json['subtask_srpm'] == null ? undefined : json['subtask_srpm'],
        'subtaskSrpmName': json['subtask_srpm_name'] == null ? undefined : json['subtask_srpm_name'],
        'subtaskSrpmEvr': json['subtask_srpm_evr'] == null ? undefined : json['subtask_srpm_evr'],
        'subtaskDir': json['subtask_dir'] == null ? undefined : json['subtask_dir'],
        'subtaskTagId': json['subtask_tag_id'] == null ? undefined : json['subtask_tag_id'],
        'subtaskTagName': json['subtask_tag_name'] == null ? undefined : json['subtask_tag_name'],
        'subtaskTagAuthor': json['subtask_tag_author'] == null ? undefined : json['subtask_tag_author'],
        'subtaskPackage': json['subtask_package'] == null ? undefined : json['subtask_package'],
        'subtaskPkgFrom': json['subtask_pkg_from'] == null ? undefined : json['subtask_pkg_from'],
        'subtaskChanged': json['subtask_changed'] == null ? undefined : (new Date(json['subtask_changed'])),
        'type': json['type'] == null ? undefined : json['type'],
        'archs': json['archs'] == null ? undefined : ((json['archs'] as Array<any>).map(SubTaskArchitectureModelFromJSON)),
    };
}

export function SubTasksElementModelToJSON(value?: SubTasksElementModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'subtask_id': value['subtaskId'],
        'subtask_type': value['subtaskType'],
        'subtask_srpm': value['subtaskSrpm'],
        'subtask_srpm_name': value['subtaskSrpmName'],
        'subtask_srpm_evr': value['subtaskSrpmEvr'],
        'subtask_dir': value['subtaskDir'],
        'subtask_tag_id': value['subtaskTagId'],
        'subtask_tag_name': value['subtaskTagName'],
        'subtask_tag_author': value['subtaskTagAuthor'],
        'subtask_package': value['subtaskPackage'],
        'subtask_pkg_from': value['subtaskPkgFrom'],
        'subtask_changed': value['subtaskChanged'] == null ? undefined : ((value['subtaskChanged']).toISOString()),
        'type': value['type'],
        'archs': value['archs'] == null ? undefined : ((value['archs'] as Array<any>).map(SubTaskArchitectureModelToJSON)),
    };
}

