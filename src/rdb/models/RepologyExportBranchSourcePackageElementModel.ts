/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RepologyExportBranchBinaryPackageElementModel } from './RepologyExportBranchBinaryPackageElementModel';
import {
    RepologyExportBranchBinaryPackageElementModelFromJSON,
    RepologyExportBranchBinaryPackageElementModelFromJSONTyped,
    RepologyExportBranchBinaryPackageElementModelToJSON,
} from './RepologyExportBranchBinaryPackageElementModel';

/**
 * 
 * @export
 * @interface RepologyExportBranchSourcePackageElementModel
 */
export interface RepologyExportBranchSourcePackageElementModel {
    /**
     * package name
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    name?: string;
    /**
     * package epoch
     * @type {number}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    epoch?: number;
    /**
     * package version
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    version?: string;
    /**
     * package release
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    release?: string;
    /**
     * package upstream URL
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    url?: string;
    /**
     * package license
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    license?: string;
    /**
     * package category
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    category?: string;
    /**
     * package summary
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    summary?: string;
    /**
     * packager email
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    packager?: string;
    /**
     * package homepage
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    homepage?: string;
    /**
     * package spec file
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    recipe?: string;
    /**
     * package spec file raw
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    recipeRaw?: string;
    /**
     * package bugs
     * @type {string}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    bugzilla?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    cPE?: Array<string>;
    /**
     * binary packages info
     * @type {Array<RepologyExportBranchBinaryPackageElementModel>}
     * @memberof RepologyExportBranchSourcePackageElementModel
     */
    binaries?: Array<RepologyExportBranchBinaryPackageElementModel>;
}

/**
 * Check if a given object implements the RepologyExportBranchSourcePackageElementModel interface.
 */
export function instanceOfRepologyExportBranchSourcePackageElementModel(value: object): value is RepologyExportBranchSourcePackageElementModel {
    return true;
}

export function RepologyExportBranchSourcePackageElementModelFromJSON(json: any): RepologyExportBranchSourcePackageElementModel {
    return RepologyExportBranchSourcePackageElementModelFromJSONTyped(json, false);
}

export function RepologyExportBranchSourcePackageElementModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): RepologyExportBranchSourcePackageElementModel {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'epoch': json['epoch'] == null ? undefined : json['epoch'],
        'version': json['version'] == null ? undefined : json['version'],
        'release': json['release'] == null ? undefined : json['release'],
        'url': json['url'] == null ? undefined : json['url'],
        'license': json['license'] == null ? undefined : json['license'],
        'category': json['category'] == null ? undefined : json['category'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'packager': json['packager'] == null ? undefined : json['packager'],
        'homepage': json['homepage'] == null ? undefined : json['homepage'],
        'recipe': json['recipe'] == null ? undefined : json['recipe'],
        'recipeRaw': json['recipe_raw'] == null ? undefined : json['recipe_raw'],
        'bugzilla': json['bugzilla'] == null ? undefined : json['bugzilla'],
        'cPE': json['CPE'] == null ? undefined : json['CPE'],
        'binaries': json['binaries'] == null ? undefined : ((json['binaries'] as Array<any>).map(RepologyExportBranchBinaryPackageElementModelFromJSON)),
    };
}

export function RepologyExportBranchSourcePackageElementModelToJSON(value?: RepologyExportBranchSourcePackageElementModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'epoch': value['epoch'],
        'version': value['version'],
        'release': value['release'],
        'url': value['url'],
        'license': value['license'],
        'category': value['category'],
        'summary': value['summary'],
        'packager': value['packager'],
        'homepage': value['homepage'],
        'recipe': value['recipe'],
        'recipe_raw': value['recipeRaw'],
        'bugzilla': value['bugzilla'],
        'CPE': value['cPE'],
        'binaries': value['binaries'] == null ? undefined : ((value['binaries'] as Array<any>).map(RepologyExportBranchBinaryPackageElementModelToJSON)),
    };
}

