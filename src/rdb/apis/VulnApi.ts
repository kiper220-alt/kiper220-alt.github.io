/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CveVulnerableTaskModel,
  VulnFixesPackagesModel,
  VulnerabilityInfoModel,
} from '../models/index';
import {
    CveVulnerableTaskModelFromJSON,
    CveVulnerableTaskModelToJSON,
    VulnFixesPackagesModelFromJSON,
    VulnFixesPackagesModelToJSON,
    VulnerabilityInfoModelFromJSON,
    VulnerabilityInfoModelToJSON,
} from '../models/index';

export interface GetRouteBduInfoVulnBduRequest {
    vulnId: string;
}

export interface GetRouteCveInfoVulnCveRequest {
    vulnId: string;
}

export interface GetRouteTaskVulnerabilitiesVulnTaskIntIdRequest {
    id: number;
}

export interface GetRouteVulnerableBduFixesVulnBduFixesRequest {
    vulnId: string;
}

export interface GetRouteVulnerableCveFixesVulnCveFixesRequest {
    vulnId: string;
}

/**
 * 
 */
export class VulnApi extends runtime.BaseAPI {

    /**
     * Get BDU information
     */
    async getRouteBduInfoVulnBduRaw(requestParameters: GetRouteBduInfoVulnBduRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VulnerabilityInfoModel>> {
        if (requestParameters['vulnId'] == null) {
            throw new runtime.RequiredError(
                'vulnId',
                'Required parameter "vulnId" was null or undefined when calling getRouteBduInfoVulnBdu().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vulnId'] != null) {
            queryParameters['vuln_id'] = requestParameters['vulnId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vuln/bdu`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilityInfoModelFromJSON(jsonValue));
    }

    /**
     * Get BDU information
     */
    async getRouteBduInfoVulnBdu(requestParameters: GetRouteBduInfoVulnBduRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VulnerabilityInfoModel> {
        const response = await this.getRouteBduInfoVulnBduRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CVE information
     */
    async getRouteCveInfoVulnCveRaw(requestParameters: GetRouteCveInfoVulnCveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VulnerabilityInfoModel>> {
        if (requestParameters['vulnId'] == null) {
            throw new runtime.RequiredError(
                'vulnId',
                'Required parameter "vulnId" was null or undefined when calling getRouteCveInfoVulnCve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vulnId'] != null) {
            queryParameters['vuln_id'] = requestParameters['vulnId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vuln/cve`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilityInfoModelFromJSON(jsonValue));
    }

    /**
     * Get CVE information
     */
    async getRouteCveInfoVulnCve(requestParameters: GetRouteCveInfoVulnCveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VulnerabilityInfoModel> {
        const response = await this.getRouteCveInfoVulnCveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of fixed CVEs from an task with one of the following states: EPERM, TESTED, or DONE.
     */
    async getRouteTaskVulnerabilitiesVulnTaskIntIdRaw(requestParameters: GetRouteTaskVulnerabilitiesVulnTaskIntIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CveVulnerableTaskModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRouteTaskVulnerabilitiesVulnTaskIntId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vuln/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CveVulnerableTaskModelFromJSON(jsonValue));
    }

    /**
     * Get a list of fixed CVEs from an task with one of the following states: EPERM, TESTED, or DONE.
     */
    async getRouteTaskVulnerabilitiesVulnTaskIntId(requestParameters: GetRouteTaskVulnerabilitiesVulnTaskIntIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CveVulnerableTaskModel> {
        const response = await this.getRouteTaskVulnerabilitiesVulnTaskIntIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of packages in which the specified BDU vulnerability is closed.
     */
    async getRouteVulnerableBduFixesVulnBduFixesRaw(requestParameters: GetRouteVulnerableBduFixesVulnBduFixesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VulnFixesPackagesModel>> {
        if (requestParameters['vulnId'] == null) {
            throw new runtime.RequiredError(
                'vulnId',
                'Required parameter "vulnId" was null or undefined when calling getRouteVulnerableBduFixesVulnBduFixes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vulnId'] != null) {
            queryParameters['vuln_id'] = requestParameters['vulnId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vuln/bdu/fixes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnFixesPackagesModelFromJSON(jsonValue));
    }

    /**
     * Get a list of packages in which the specified BDU vulnerability is closed.
     */
    async getRouteVulnerableBduFixesVulnBduFixes(requestParameters: GetRouteVulnerableBduFixesVulnBduFixesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VulnFixesPackagesModel> {
        const response = await this.getRouteVulnerableBduFixesVulnBduFixesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of packages in which the specified CVE vulnerability is closed.
     */
    async getRouteVulnerableCveFixesVulnCveFixesRaw(requestParameters: GetRouteVulnerableCveFixesVulnCveFixesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VulnFixesPackagesModel>> {
        if (requestParameters['vulnId'] == null) {
            throw new runtime.RequiredError(
                'vulnId',
                'Required parameter "vulnId" was null or undefined when calling getRouteVulnerableCveFixesVulnCveFixes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vulnId'] != null) {
            queryParameters['vuln_id'] = requestParameters['vulnId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vuln/cve/fixes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnFixesPackagesModelFromJSON(jsonValue));
    }

    /**
     * Get a list of packages in which the specified CVE vulnerability is closed.
     */
    async getRouteVulnerableCveFixesVulnCveFixes(requestParameters: GetRouteVulnerableCveFixesVulnCveFixesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VulnFixesPackagesModel> {
        const response = await this.getRouteVulnerableCveFixesVulnCveFixesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
