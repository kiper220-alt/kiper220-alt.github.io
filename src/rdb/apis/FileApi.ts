/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FastFileSearchModel,
  FilePackagesByFileModel,
  FilesModel,
} from '../models/index';
import {
    FastFileSearchModelFromJSON,
    FastFileSearchModelToJSON,
    FilePackagesByFileModelFromJSON,
    FilePackagesByFileModelToJSON,
    FilesModelFromJSON,
    FilesModelToJSON,
} from '../models/index';

export interface GetRouteFastLookupFileFastLookupRequest {
    branch: string;
    fileName: string;
    limit?: number;
}

export interface GetRouteFileSearchFileSearchRequest {
    branch: string;
    fileName: string;
    limit?: number;
}

export interface GetRoutePackagesByFileFilePackagesByFileRequest {
    branch: string;
    fileName: string;
}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI {

    /**
     * Fast search files by name (case sensitive) including partial occurrence.
     */
    async getRouteFastLookupFileFastLookupRaw(requestParameters: GetRouteFastLookupFileFastLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FastFileSearchModel>> {
        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getRouteFastLookupFileFastLookup().'
            );
        }

        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling getRouteFastLookupFileFastLookup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/file/fast_lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FastFileSearchModelFromJSON(jsonValue));
    }

    /**
     * Fast search files by name (case sensitive) including partial occurrence.
     */
    async getRouteFastLookupFileFastLookup(requestParameters: GetRouteFastLookupFileFastLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FastFileSearchModel> {
        const response = await this.getRouteFastLookupFileFastLookupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find files by name (case sensitive) including partial occurrence.
     */
    async getRouteFileSearchFileSearchRaw(requestParameters: GetRouteFileSearchFileSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilesModel>> {
        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getRouteFileSearchFileSearch().'
            );
        }

        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling getRouteFileSearchFileSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/file/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilesModelFromJSON(jsonValue));
    }

    /**
     * Find files by name (case sensitive) including partial occurrence.
     */
    async getRouteFileSearchFileSearch(requestParameters: GetRouteFileSearchFileSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilesModel> {
        const response = await this.getRouteFileSearchFileSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of packages to which the specified file belongs to.
     */
    async getRoutePackagesByFileFilePackagesByFileRaw(requestParameters: GetRoutePackagesByFileFilePackagesByFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilePackagesByFileModel>> {
        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getRoutePackagesByFileFilePackagesByFile().'
            );
        }

        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling getRoutePackagesByFileFilePackagesByFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/file/packages_by_file`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilePackagesByFileModelFromJSON(jsonValue));
    }

    /**
     * Get a list of packages to which the specified file belongs to.
     */
    async getRoutePackagesByFileFilePackagesByFile(requestParameters: GetRoutePackagesByFileFilePackagesByFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilePackagesByFileModel> {
        const response = await this.getRoutePackagesByFileFilePackagesByFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
