/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AclByPackagesModel,
  AclGroupsModel,
  AclMaintainerGroupsModel,
} from '../models/index';
import {
    AclByPackagesModelFromJSON,
    AclByPackagesModelToJSON,
    AclGroupsModelFromJSON,
    AclGroupsModelToJSON,
    AclMaintainerGroupsModelFromJSON,
    AclMaintainerGroupsModelToJSON,
} from '../models/index';

export interface GetRouteAclByPackagesRequest {
    branch: string;
    packagesNames: Array<string>;
}

export interface GetRouteAclGroupsRequest {
    branch: string;
    name?: string;
}

export interface GetRouteMaintainerGroupsRequest {
    nickname: string;
    branch?: Array<string>;
}

/**
 * 
 */
export class AclApi extends runtime.BaseAPI {

    /**
     * ACL groups for source packages list in specific branch
     */
    async getRouteAclByPackagesRaw(requestParameters: GetRouteAclByPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AclByPackagesModel>>> {
        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getRouteAclByPackages().'
            );
        }

        if (requestParameters['packagesNames'] == null) {
            throw new runtime.RequiredError(
                'packagesNames',
                'Required parameter "packagesNames" was null or undefined when calling getRouteAclByPackages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['packagesNames'] != null) {
            queryParameters['packages_names'] = requestParameters['packagesNames']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/acl/by_packages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AclByPackagesModelFromJSON));
    }

    /**
     * ACL groups for source packages list in specific branch
     */
    async getRouteAclByPackages(requestParameters: GetRouteAclByPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AclByPackagesModel>> {
        const response = await this.getRouteAclByPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of ACL groups for specific branch
     */
    async getRouteAclGroupsRaw(requestParameters: GetRouteAclGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AclGroupsModel>>> {
        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getRouteAclGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/acl/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AclGroupsModelFromJSON));
    }

    /**
     * List of ACL groups for specific branch
     */
    async getRouteAclGroups(requestParameters: GetRouteAclGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AclGroupsModel>> {
        const response = await this.getRouteAclGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the ACL groups that the given user belongs to
     */
    async getRouteMaintainerGroupsRaw(requestParameters: GetRouteMaintainerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AclMaintainerGroupsModel>>> {
        if (requestParameters['nickname'] == null) {
            throw new runtime.RequiredError(
                'nickname',
                'Required parameter "nickname" was null or undefined when calling getRouteMaintainerGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['nickname'] != null) {
            queryParameters['nickname'] = requestParameters['nickname'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/acl/maintainer_groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AclMaintainerGroupsModelFromJSON));
    }

    /**
     * List the ACL groups that the given user belongs to
     */
    async getRouteMaintainerGroups(requestParameters: GetRouteMaintainerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AclMaintainerGroupsModel>> {
        const response = await this.getRouteMaintainerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
