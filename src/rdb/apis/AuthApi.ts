/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface PostRouteAuthLoginAuthLoginRequest {
    nickname: string;
    password: string;
}

export interface PostRouteRefreshTokenAuthRefreshTokenRequest {
    accessToken: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Authenticate an existing user and return an access token.
     */
    async postRouteAuthLoginAuthLoginRaw(requestParameters: PostRouteAuthLoginAuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nickname'] == null) {
            throw new runtime.RequiredError(
                'nickname',
                'Required parameter "nickname" was null or undefined when calling postRouteAuthLoginAuthLogin().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling postRouteAuthLoginAuthLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['nickname'] != null) {
            formParams.append('nickname', requestParameters['nickname'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('password', requestParameters['password'] as any);
        }

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticate an existing user and return an access token.
     */
    async postRouteAuthLoginAuthLogin(requestParameters: PostRouteAuthLoginAuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRouteAuthLoginAuthLoginRaw(requestParameters, initOverrides);
    }

    /**
     * User logs out.
     */
    async postRouteAuthLogoutAuthLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User logs out.
     */
    async postRouteAuthLogoutAuthLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRouteAuthLogoutAuthLogoutRaw(initOverrides);
    }

    /**
     * Update access token.
     */
    async postRouteRefreshTokenAuthRefreshTokenRaw(requestParameters: PostRouteRefreshTokenAuthRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling postRouteRefreshTokenAuthRefreshToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['accessToken'] != null) {
            formParams.append('access_token', requestParameters['accessToken'] as any);
        }

        const response = await this.request({
            path: `/auth/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update access token.
     */
    async postRouteRefreshTokenAuthRefreshToken(requestParameters: PostRouteRefreshTokenAuthRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRouteRefreshTokenAuthRefreshTokenRaw(requestParameters, initOverrides);
    }

}
