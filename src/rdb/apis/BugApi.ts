/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BugzillaInfoModel,
} from '../models/index';
import {
    BugzillaInfoModelFromJSON,
    BugzillaInfoModelToJSON,
} from '../models/index';

export interface GetRouteBugzillaByImageEditionBugBugzillaByImageEditionRequest {
    branch: string;
    edition: string;
}

export interface GetRouteBugzillaByMaintainerBugBugzillaByMaintainerRequest {
    maintainerNickname: string;
    byAcl?: GetRouteBugzillaByMaintainerBugBugzillaByMaintainerByAclEnum;
}

export interface GetRouteBugzillaByPackageBugBugzillaByPackageRequest {
    packageName: string;
    packageType?: GetRouteBugzillaByPackageBugBugzillaByPackagePackageTypeEnum;
}

/**
 * 
 */
export class BugApi extends runtime.BaseAPI {

    /**
     * Get information from bugzilla by image edition
     */
    async getRouteBugzillaByImageEditionBugBugzillaByImageEditionRaw(requestParameters: GetRouteBugzillaByImageEditionBugBugzillaByImageEditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BugzillaInfoModel>>> {
        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getRouteBugzillaByImageEditionBugBugzillaByImageEdition().'
            );
        }

        if (requestParameters['edition'] == null) {
            throw new runtime.RequiredError(
                'edition',
                'Required parameter "edition" was null or undefined when calling getRouteBugzillaByImageEditionBugBugzillaByImageEdition().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['edition'] != null) {
            queryParameters['edition'] = requestParameters['edition'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bug/bugzilla_by_image_edition`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BugzillaInfoModelFromJSON));
    }

    /**
     * Get information from bugzilla by image edition
     */
    async getRouteBugzillaByImageEditionBugBugzillaByImageEdition(requestParameters: GetRouteBugzillaByImageEditionBugBugzillaByImageEditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BugzillaInfoModel>> {
        const response = await this.getRouteBugzillaByImageEditionBugBugzillaByImageEditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information from bugzilla by the maintainer nickname
     */
    async getRouteBugzillaByMaintainerBugBugzillaByMaintainerRaw(requestParameters: GetRouteBugzillaByMaintainerBugBugzillaByMaintainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BugzillaInfoModel>>> {
        if (requestParameters['maintainerNickname'] == null) {
            throw new runtime.RequiredError(
                'maintainerNickname',
                'Required parameter "maintainerNickname" was null or undefined when calling getRouteBugzillaByMaintainerBugBugzillaByMaintainer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['maintainerNickname'] != null) {
            queryParameters['maintainer_nickname'] = requestParameters['maintainerNickname'];
        }

        if (requestParameters['byAcl'] != null) {
            queryParameters['by_acl'] = requestParameters['byAcl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bug/bugzilla_by_maintainer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BugzillaInfoModelFromJSON));
    }

    /**
     * Get information from bugzilla by the maintainer nickname
     */
    async getRouteBugzillaByMaintainerBugBugzillaByMaintainer(requestParameters: GetRouteBugzillaByMaintainerBugBugzillaByMaintainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BugzillaInfoModel>> {
        const response = await this.getRouteBugzillaByMaintainerBugBugzillaByMaintainerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information from bugzilla by the source package name
     */
    async getRouteBugzillaByPackageBugBugzillaByPackageRaw(requestParameters: GetRouteBugzillaByPackageBugBugzillaByPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BugzillaInfoModel>>> {
        if (requestParameters['packageName'] == null) {
            throw new runtime.RequiredError(
                'packageName',
                'Required parameter "packageName" was null or undefined when calling getRouteBugzillaByPackageBugBugzillaByPackage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['packageName'] != null) {
            queryParameters['package_name'] = requestParameters['packageName'];
        }

        if (requestParameters['packageType'] != null) {
            queryParameters['package_type'] = requestParameters['packageType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bug/bugzilla_by_package`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BugzillaInfoModelFromJSON));
    }

    /**
     * Get information from bugzilla by the source package name
     */
    async getRouteBugzillaByPackageBugBugzillaByPackage(requestParameters: GetRouteBugzillaByPackageBugBugzillaByPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BugzillaInfoModel>> {
        const response = await this.getRouteBugzillaByPackageBugBugzillaByPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetRouteBugzillaByMaintainerBugBugzillaByMaintainerByAclEnum = {
    None: 'none',
    ByNick: 'by_nick',
    ByNickLeader: 'by_nick_leader',
    ByNickOrGroup: 'by_nick_or_group',
    ByNickLeaderAndGroup: 'by_nick_leader_and_group'
} as const;
export type GetRouteBugzillaByMaintainerBugBugzillaByMaintainerByAclEnum = typeof GetRouteBugzillaByMaintainerBugBugzillaByMaintainerByAclEnum[keyof typeof GetRouteBugzillaByMaintainerBugBugzillaByMaintainerByAclEnum];
/**
 * @export
 */
export const GetRouteBugzillaByPackageBugBugzillaByPackagePackageTypeEnum = {
    Source: 'source',
    Binary: 'binary'
} as const;
export type GetRouteBugzillaByPackageBugBugzillaByPackagePackageTypeEnum = typeof GetRouteBugzillaByPackageBugBugzillaByPackagePackageTypeEnum[keyof typeof GetRouteBugzillaByPackageBugBugzillaByPackagePackageTypeEnum];
