/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllTasksBranchesModel,
  FindTasksModel,
  TaskProgressTaskInfoModel,
  TasksListModel,
} from '../models/index';
import {
    AllTasksBranchesModelFromJSON,
    AllTasksBranchesModelToJSON,
    FindTasksModelFromJSON,
    FindTasksModelToJSON,
    TaskProgressTaskInfoModelFromJSON,
    TaskProgressTaskInfoModelToJSON,
    TasksListModelFromJSON,
    TasksListModelToJSON,
} from '../models/index';

export interface GetRouteFindTasksLookupTaskProgressFindTasksLookupRequest {
    input: Array<string>;
    branch?: string;
    tasksLimit?: number;
}

export interface GetRouteFindTasksTaskProgressFindTasksRequest {
    input: Array<string>;
    owner?: string;
    branch?: string;
    state?: Array<string>;
    tasksLimit?: number;
    byPackage?: boolean;
}

export interface GetRouteLastTasksTaskProgressLastTasksRequest {
    branch?: string;
    tasksLimit?: number;
}

export interface GetRouteTaskInfoTaskProgressTaskInfoIntIdRequest {
    id: number;
}

/**
 * 
 */
export class TaskProgressApi extends runtime.BaseAPI {

    /**
     * Get branches list for last tasks
     */
    async getRouteAllTasksBranchesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllTasksBranchesModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/progress/all_tasks_branches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllTasksBranchesModelFromJSON(jsonValue));
    }

    /**
     * Get branches list for last tasks
     */
    async getRouteAllTasksBranches(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllTasksBranchesModel> {
        const response = await this.getRouteAllTasksBranchesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Alias for \'all_tasks_branches\' for compatibility
     * @deprecated
     */
    async getRouteAllTasksBranchesTaskProgressAllPackagesetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllTasksBranchesModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/progress/all_packagesets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllTasksBranchesModelFromJSON(jsonValue));
    }

    /**
     * Alias for \'all_tasks_branches\' for compatibility
     * @deprecated
     */
    async getRouteAllTasksBranchesTaskProgressAllPackagesets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllTasksBranchesModel> {
        const response = await this.getRouteAllTasksBranchesTaskProgressAllPackagesetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Task search by ID, owner, repo, state and component.
     */
    async getRouteFindTasksLookupTaskProgressFindTasksLookupRaw(requestParameters: GetRouteFindTasksLookupTaskProgressFindTasksLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindTasksModel>> {
        if (requestParameters['input'] == null) {
            throw new runtime.RequiredError(
                'input',
                'Required parameter "input" was null or undefined when calling getRouteFindTasksLookupTaskProgressFindTasksLookup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['input'] != null) {
            queryParameters['input'] = requestParameters['input']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['tasksLimit'] != null) {
            queryParameters['tasks_limit'] = requestParameters['tasksLimit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/progress/find_tasks_lookup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindTasksModelFromJSON(jsonValue));
    }

    /**
     * Task search by ID, owner, repo, state and component.
     */
    async getRouteFindTasksLookupTaskProgressFindTasksLookup(requestParameters: GetRouteFindTasksLookupTaskProgressFindTasksLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindTasksModel> {
        const response = await this.getRouteFindTasksLookupTaskProgressFindTasksLookupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Task search by ID, task owner or component.
     */
    async getRouteFindTasksTaskProgressFindTasksRaw(requestParameters: GetRouteFindTasksTaskProgressFindTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksListModel>> {
        if (requestParameters['input'] == null) {
            throw new runtime.RequiredError(
                'input',
                'Required parameter "input" was null or undefined when calling getRouteFindTasksTaskProgressFindTasks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['input'] != null) {
            queryParameters['input'] = requestParameters['input']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['tasksLimit'] != null) {
            queryParameters['tasks_limit'] = requestParameters['tasksLimit'];
        }

        if (requestParameters['byPackage'] != null) {
            queryParameters['by_package'] = requestParameters['byPackage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/progress/find_tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksListModelFromJSON(jsonValue));
    }

    /**
     * Task search by ID, task owner or component.
     */
    async getRouteFindTasksTaskProgressFindTasks(requestParameters: GetRouteFindTasksTaskProgressFindTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksListModel> {
        const response = await this.getRouteFindTasksTaskProgressFindTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the latest tasks changes
     */
    async getRouteLastTasksTaskProgressLastTasksRaw(requestParameters: GetRouteLastTasksTaskProgressLastTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TasksListModel>> {
        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['tasksLimit'] != null) {
            queryParameters['tasks_limit'] = requestParameters['tasksLimit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/progress/last_tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksListModelFromJSON(jsonValue));
    }

    /**
     * Get the latest tasks changes
     */
    async getRouteLastTasksTaskProgressLastTasks(requestParameters: GetRouteLastTasksTaskProgressLastTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TasksListModel> {
        const response = await this.getRouteLastTasksTaskProgressLastTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information for task by ID
     */
    async getRouteTaskInfoTaskProgressTaskInfoIntIdRaw(requestParameters: GetRouteTaskInfoTaskProgressTaskInfoIntIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProgressTaskInfoModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRouteTaskInfoTaskProgressTaskInfoIntId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/progress/task_info/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProgressTaskInfoModelFromJSON(jsonValue));
    }

    /**
     * Get information for task by ID
     */
    async getRouteTaskInfoTaskProgressTaskInfoIntId(requestParameters: GetRouteTaskInfoTaskProgressTaskInfoIntIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProgressTaskInfoModel> {
        const response = await this.getRouteTaskInfoTaskProgressTaskInfoIntIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
