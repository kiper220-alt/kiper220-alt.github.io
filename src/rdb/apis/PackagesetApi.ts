/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PackageSetActivePackageSetsModel,
  PackageSetStatusGetModel,
  PackageSetStatusPostModel,
  PackagesByUuidModel,
  PackagesetCompareModel,
  PackagesetPackagesModel,
  RepositoryStatisticsModel,
} from '../models/index';
import {
    PackageSetActivePackageSetsModelFromJSON,
    PackageSetActivePackageSetsModelToJSON,
    PackageSetStatusGetModelFromJSON,
    PackageSetStatusGetModelToJSON,
    PackageSetStatusPostModelFromJSON,
    PackageSetStatusPostModelToJSON,
    PackagesByUuidModelFromJSON,
    PackagesByUuidModelToJSON,
    PackagesetCompareModelFromJSON,
    PackagesetCompareModelToJSON,
    PackagesetPackagesModelFromJSON,
    PackagesetPackagesModelToJSON,
    RepositoryStatisticsModelFromJSON,
    RepositoryStatisticsModelToJSON,
} from '../models/index';

export interface GetRoutePackagesByComponentPackagesetPackagesByComponentRequest {
    branch: string;
    arch: string;
    component: string;
}

export interface GetRoutePackagesByUuidPackagesetPackagesByUuidRequest {
    uuid: string;
}

export interface GetRoutePackagesetComparePackagesetComparePackagesetsRequest {
    pkgset1: string;
    pkgset2: string;
}

export interface GetRoutePackagesetPackagesPackagesetRepositoryPackagesRequest {
    branch: string;
    packageType?: GetRoutePackagesetPackagesPackagesetRepositoryPackagesPackageTypeEnum;
    archs?: Array<string>;
}

export interface GetRouteRepositoryStatisticsPackagesetRepositoryStatisticsRequest {
    branch?: string;
}

export interface PostRouteRepositoryStatusRequest {
    payload: PackageSetStatusPostModel;
}

/**
 * 
 */
export class PackagesetApi extends runtime.BaseAPI {

    /**
     * Get list of active package sets
     */
    async getRouteActivePackagesetsPackagesetActivePackagesetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageSetActivePackageSetsModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packageset/active_packagesets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageSetActivePackageSetsModelFromJSON(jsonValue));
    }

    /**
     * Get list of active package sets
     */
    async getRouteActivePackagesetsPackagesetActivePackagesets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageSetActivePackageSetsModel> {
        const response = await this.getRouteActivePackagesetsPackagesetActivePackagesetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get packages by packageset component and architecture.
     */
    async getRoutePackagesByComponentPackagesetPackagesByComponentRaw(requestParameters: GetRoutePackagesByComponentPackagesetPackagesByComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackagesByUuidModel>> {
        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getRoutePackagesByComponentPackagesetPackagesByComponent().'
            );
        }

        if (requestParameters['arch'] == null) {
            throw new runtime.RequiredError(
                'arch',
                'Required parameter "arch" was null or undefined when calling getRoutePackagesByComponentPackagesetPackagesByComponent().'
            );
        }

        if (requestParameters['component'] == null) {
            throw new runtime.RequiredError(
                'component',
                'Required parameter "component" was null or undefined when calling getRoutePackagesByComponentPackagesetPackagesByComponent().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['arch'] != null) {
            queryParameters['arch'] = requestParameters['arch'];
        }

        if (requestParameters['component'] != null) {
            queryParameters['component'] = requestParameters['component'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packageset/packages_by_component`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackagesByUuidModelFromJSON(jsonValue));
    }

    /**
     * Get packages by packageset component and architecture.
     */
    async getRoutePackagesByComponentPackagesetPackagesByComponent(requestParameters: GetRoutePackagesByComponentPackagesetPackagesByComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackagesByUuidModel> {
        const response = await this.getRoutePackagesByComponentPackagesetPackagesByComponentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get packages by packageset component UUID
     */
    async getRoutePackagesByUuidPackagesetPackagesByUuidRaw(requestParameters: GetRoutePackagesByUuidPackagesetPackagesByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackagesByUuidModel>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getRoutePackagesByUuidPackagesetPackagesByUuid().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packageset/packages_by_uuid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackagesByUuidModelFromJSON(jsonValue));
    }

    /**
     * Get packages by packageset component UUID
     */
    async getRoutePackagesByUuidPackagesetPackagesByUuid(requestParameters: GetRoutePackagesByUuidPackagesetPackagesByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackagesByUuidModel> {
        const response = await this.getRoutePackagesByUuidPackagesetPackagesByUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get difference list of packages from two package sets
     */
    async getRoutePackagesetComparePackagesetComparePackagesetsRaw(requestParameters: GetRoutePackagesetComparePackagesetComparePackagesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackagesetCompareModel>> {
        if (requestParameters['pkgset1'] == null) {
            throw new runtime.RequiredError(
                'pkgset1',
                'Required parameter "pkgset1" was null or undefined when calling getRoutePackagesetComparePackagesetComparePackagesets().'
            );
        }

        if (requestParameters['pkgset2'] == null) {
            throw new runtime.RequiredError(
                'pkgset2',
                'Required parameter "pkgset2" was null or undefined when calling getRoutePackagesetComparePackagesetComparePackagesets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pkgset1'] != null) {
            queryParameters['pkgset1'] = requestParameters['pkgset1'];
        }

        if (requestParameters['pkgset2'] != null) {
            queryParameters['pkgset2'] = requestParameters['pkgset2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packageset/compare_packagesets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackagesetCompareModelFromJSON(jsonValue));
    }

    /**
     * Get difference list of packages from two package sets
     */
    async getRoutePackagesetComparePackagesetComparePackagesets(requestParameters: GetRoutePackagesetComparePackagesetComparePackagesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackagesetCompareModel> {
        const response = await this.getRoutePackagesetComparePackagesetComparePackagesetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of packageset packages. Architecture argument is actual only if type is \'binary\'.
     */
    async getRoutePackagesetPackagesPackagesetRepositoryPackagesRaw(requestParameters: GetRoutePackagesetPackagesPackagesetRepositoryPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackagesetPackagesModel>> {
        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getRoutePackagesetPackagesPackagesetRepositoryPackages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['packageType'] != null) {
            queryParameters['package_type'] = requestParameters['packageType'];
        }

        if (requestParameters['archs'] != null) {
            queryParameters['archs'] = requestParameters['archs']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packageset/repository_packages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackagesetPackagesModelFromJSON(jsonValue));
    }

    /**
     * Get list of packageset packages. Architecture argument is actual only if type is \'binary\'.
     */
    async getRoutePackagesetPackagesPackagesetRepositoryPackages(requestParameters: GetRoutePackagesetPackagesPackagesetRepositoryPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackagesetPackagesModel> {
        const response = await this.getRoutePackagesetPackagesPackagesetRepositoryPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get repository statistics
     */
    async getRouteRepositoryStatisticsPackagesetRepositoryStatisticsRaw(requestParameters: GetRouteRepositoryStatisticsPackagesetRepositoryStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepositoryStatisticsModel>> {
        const queryParameters: any = {};

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packageset/repository_statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryStatisticsModelFromJSON(jsonValue));
    }

    /**
     * Get repository statistics
     */
    async getRouteRepositoryStatisticsPackagesetRepositoryStatistics(requestParameters: GetRouteRepositoryStatisticsPackagesetRepositoryStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepositoryStatisticsModel> {
        const response = await this.getRouteRepositoryStatisticsPackagesetRepositoryStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get package set status into database
     */
    async getRouteRepositoryStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageSetStatusGetModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/packageset/pkgset_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageSetStatusGetModelFromJSON(jsonValue));
    }

    /**
     * Get package set status into database
     */
    async getRouteRepositoryStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageSetStatusGetModel> {
        const response = await this.getRouteRepositoryStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Load package set status into database
     */
    async postRouteRepositoryStatusRaw(requestParameters: PostRouteRepositoryStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling postRouteRepositoryStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/packageset/pkgset_status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackageSetStatusPostModelToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Load package set status into database
     */
    async postRouteRepositoryStatus(requestParameters: PostRouteRepositoryStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRouteRepositoryStatusRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetRoutePackagesetPackagesPackagesetRepositoryPackagesPackageTypeEnum = {
    All: 'all',
    Source: 'source',
    Binary: 'binary'
} as const;
export type GetRoutePackagesetPackagesPackagesetRepositoryPackagesPackageTypeEnum = typeof GetRoutePackagesetPackagesPackagesetRepositoryPackagesPackageTypeEnum[keyof typeof GetRoutePackagesetPackagesPackagesetRepositoryPackagesPackageTypeEnum];
