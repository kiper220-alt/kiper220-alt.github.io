/* tslint:disable */
/* eslint-disable */
/**
 * ALTRepo API
 * altrepo API v1
 *
 * The version of the OpenAPI document: 1.19.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LicenseInfoModel,
  LicenseTokensModel,
} from '../models/index';
import {
    LicenseInfoModelFromJSON,
    LicenseInfoModelToJSON,
    LicenseTokensModelFromJSON,
    LicenseTokensModelToJSON,
} from '../models/index';

export interface GetRouteLicenseInfoLicenseInfoRequest {
    license: string;
}

export interface GetRouteLicenseTokensLicenseTokensRequest {
    license: string;
}

/**
 * 
 */
export class LicenseApi extends runtime.BaseAPI {

    /**
     * Get license info by SPDX license ID
     */
    async getRouteLicenseInfoLicenseInfoRaw(requestParameters: GetRouteLicenseInfoLicenseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LicenseInfoModel>> {
        if (requestParameters['license'] == null) {
            throw new runtime.RequiredError(
                'license',
                'Required parameter "license" was null or undefined when calling getRouteLicenseInfoLicenseInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['license'] != null) {
            queryParameters['license'] = requestParameters['license'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/license/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseInfoModelFromJSON(jsonValue));
    }

    /**
     * Get license info by SPDX license ID
     */
    async getRouteLicenseInfoLicenseInfo(requestParameters: GetRouteLicenseInfoLicenseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LicenseInfoModel> {
        const response = await this.getRouteLicenseInfoLicenseInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get valid license tokens and SPDX license IDs
     */
    async getRouteLicenseTokensLicenseTokensRaw(requestParameters: GetRouteLicenseTokensLicenseTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LicenseTokensModel>> {
        if (requestParameters['license'] == null) {
            throw new runtime.RequiredError(
                'license',
                'Required parameter "license" was null or undefined when calling getRouteLicenseTokensLicenseTokens().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['license'] != null) {
            queryParameters['license'] = requestParameters['license'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/license/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseTokensModelFromJSON(jsonValue));
    }

    /**
     * Get valid license tokens and SPDX license IDs
     */
    async getRouteLicenseTokensLicenseTokens(requestParameters: GetRouteLicenseTokensLicenseTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LicenseTokensModel> {
        const response = await this.getRouteLicenseTokensLicenseTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
